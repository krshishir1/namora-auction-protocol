// This file was autogenerated by hardhat-viem, do not edit it.
// prettier-ignore
// tslint:disable
// eslint-disable

import type { Address } from "viem";
import type { GetContractReturnType } from "@nomicfoundation/hardhat-viem/types";
import "@nomicfoundation/hardhat-viem/types";

export interface IDomaRecord$Type {
  "_format": "hh-sol-artifact-1",
  "contractName": "IDomaRecord",
  "sourceName": "contracts/interfaces/IDoma.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "targetChainId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "targetOwnerAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "correlationId",
          "type": "string"
        }
      ],
      "name": "bridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "chainId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "claimedBy",
          "type": "string"
        },
        {
          "internalType": "enum IDomaRecord.ProofOfContactsSource",
          "name": "proofSource",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "registrantHandle",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "correlationId",
          "type": "string"
        }
      ],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "correlationId",
          "type": "string"
        }
      ],
      "name": "completeDetokenization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "registrarIanaId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "sld",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tld",
              "type": "string"
            }
          ],
          "internalType": "struct IDomaRecord.NameInfo[]",
          "name": "names",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "ownershipTokenChainId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ownershipTokenOwnerAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "correlationId",
          "type": "string"
        }
      ],
      "name": "initiateTokenization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "chainId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ownerAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "correlationId",
          "type": "string"
        }
      ],
      "name": "ownerDetokenize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "chainId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "oldOwnerAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newOwnerAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "correlationId",
          "type": "string"
        }
      ],
      "name": "tokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {}
}

declare module "@nomicfoundation/hardhat-viem/types" {
  export function deployContract(
    contractName: "IDomaRecord",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<IDomaRecord$Type["abi"]>>;
  export function deployContract(
    contractName: "contracts/interfaces/IDoma.sol:IDomaRecord",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<IDomaRecord$Type["abi"]>>;

  export function sendDeploymentTransaction(
    contractName: "IDomaRecord",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<IDomaRecord$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;
  export function sendDeploymentTransaction(
    contractName: "contracts/interfaces/IDoma.sol:IDomaRecord",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<IDomaRecord$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;

  export function getContractAt(
    contractName: "IDomaRecord",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<IDomaRecord$Type["abi"]>>;
  export function getContractAt(
    contractName: "contracts/interfaces/IDoma.sol:IDomaRecord",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<IDomaRecord$Type["abi"]>>;
}
